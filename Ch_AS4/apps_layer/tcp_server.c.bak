/**
 * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
 * OF SUCH DAMAGE.
 *
 * This file is part of and a contribution to the lwIP TCP/IP stack.
 *
 * Credits go to Adam Dunkels (and the current maintainers) of this software.
 *
 * Christiaan Simons rewrote this file to get a more stable echo example.
 *
 **/

 /* This file was modified by ST */


#include "config.h"
#include "lwip/tcp.h"
//#include "lwip/stats.h"

#include "tcp_server.h"

#include "net_AS.h"

extern LCAS_DEV_STATE_t devState;

//#define SYSEM


#if LWIP_TCP

//u8_t data_buff[610]={0x30,};
static struct tcp_pcb *tcp_server_pcb;
//uint8_t FrameSendRequest;
struct tcp_server_struct SvrStruct;
struct tcp_server_struct *g_es;
u8_t esstate_save;
struct tcp_pcb *g_pcb;
//struct pbuf *g_p;
GCSVC_ST gcsvc;
//extern GCDBG_ST gcdbg;

uint8_t ConnTime=0;

struct tcp_pcb *netAS_PCB;

//char pPacketBuff[PACKET_SIZE_MAX];
signed char retERR;
uint32_t  sndCnt = 0;

//extern LCAS_DEV_STATE_t devState;

volatile char g_TcpWindowState = STATE_TCP_NORMAL_WND;		//(+)210722 CJKIM, TCP Zero Window

const char* pkt_code_str(int code);



static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err);
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err);
static void tcp_server_error(void *arg, err_t err);
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb);
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len);
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es);
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es);
static void tcp_server_connection_abort(struct tcp_pcb *tpcb, struct tcp_server_struct *es);		//(+)210722 CJKIM, added

err_t tcp_GCDB_Send(struct tcp_pcb *tpcb, struct tcp_server_struct *es, struct pbuf *gcd_pbuf);

#if KCJ_TCP_INTR
extern void MSS_MAC_enable_intr();				//(+) 210621 CJKIM, For atomic tx .
extern void MSS_MAC_disable_intr();				//(+) 210621 CJKIM, For atomic tx .
#endif

/**
  * @brief  Initializes the tcp server
  * @param  None
  * @retval None
  */
void tcp_server_init(void)
{
  /* create new tcp pcb */
dfp("tcp_server_init\r\n");

    tcp_server_pcb = tcp_new();

    if (tcp_server_pcb != NULL)
    {
        err_t err;

        /* bind pcb to port IP_PORT_NUMBER */
        err = tcp_bind(tcp_server_pcb, IP_ADDR_ANY, IP_PORT_NUMBER);

        if (err == ERR_OK)
        {
            /* start tcp listening for echo_pcb */
            tcp_server_pcb = tcp_listen(tcp_server_pcb);
            dfp("start tcp listening (port : %d)\r\n",IP_PORT_NUMBER);

            /* initialize LwIP tcp_accept callback function */
            tcp_accept(tcp_server_pcb, tcp_server_accept);
            dfp("tcp_accept call back function : tcp_server_accept()\r\n");
        }
        else 
        {
            dfp("Can not bind pcb\n");
        }
    }
    else
    {
        dfp("Can not create new pcb\n");
    }
}

/**
  * @brief  This function is the implementation of tcp_accept LwIP callback
  * @param  arg: not used
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
#if 0
/* Definitions for error constants. */

#define ERR_OK          0    /* No error, everything OK. */
#define ERR_MEM        -1    /* Out of memory error.     */
#define ERR_BUF        -2    /* Buffer error.            */
#define ERR_TIMEOUT    -3    /* Timeout.                 */
#define ERR_RTE        -4    /* Routing problem.         */

#define ERR_IS_FATAL(e) ((e) < ERR_RTE)

#define ERR_ABRT       -5    /* Connection aborted.      */
#define ERR_RST        -6    /* Connection reset.        */
#define ERR_CLSD       -7    /* Connection closed.       */
#define ERR_CONN       -8    /* Not connected.           */

#define ERR_VAL        -9    /* Illegal value.           */

#define ERR_ARG        -10   /* Illegal argument.        */

#define ERR_USE        -11   /* Address in use.          */

#define ERR_IF         -12   /* Low-level netif error    */
#define ERR_ISCONN     -13   /* Already connected.       */

#define ERR_INPROGRESS -14   /* Operation in progress    */
#endif

static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  err_t ret_err;
  struct tcp_server_struct *es;

dfp("Client is connected \r\n");

#if TCP_SERVER_CONNECTION_ONLY_ONE
	if(devState.connected == YES) {
	iprintf("Client connect ==> abort!!  \r\n");		
		ret_err = ERR_ABRT;
		return ret_err;
	}
#endif

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN); //  tcp_setprio(newpcb, TCP_PRIO_MAX);

  /* allocate structure es to maintain tcp connection informations */
  //es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
  es = &SvrStruct;
  g_es = es;

 if (es != NULL)
  {
    es->state = ES_ACCEPTED;
    es->pcb = newpcb;
    es->p = NULL;
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_server_recv);
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
#if 1 // RYU_TCP     
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 1);
#endif

// RYU
netAS_PCB = newpcb;

netConnection();

    ret_err = ERR_OK;
  }
  else
  {
    /* return memory error */
    ret_err = ERR_MEM;
  }
  return ret_err;  
}

/**
  * @brief  This function is the implementation for tcp_recv LwIP callback
  * @param  arg: pointer on a argument for the tcp_pcb connection
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the received pbuf
  * @retval err_t: error code
  */

static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
	struct tcp_server_struct *es;
	err_t ret_err;

	static char acData_in[TCP_RECV_PACKET_BUFF_SIZE];
//	char *pData_in;

	static int iSaveDatainPos = 0;	// 저장해야할 acData_in[]의 어레이 위치 	
	LCAS_PACKET* pPacket;
	int iPacketLength = 0;	// 읽을 패킷 길이

	int find_data_cnt = 0; 

	LWIP_ASSERT("arg != NULL",arg != NULL);

	es = (struct tcp_server_struct *)arg;
	g_es = es;
	g_pcb = tpcb;

	/* if we receive an empty tcp frame from client => close connection */
	if (p == NULL)
	{
		/* remote host closed connection */
		es->state = ES_CLOSING;
		if(es->p == NULL)
		{
			/* we're done sending, close connection */
			tcp_server_connection_close(tpcb, es);
		}
		else
		{
// RYU_TCP
			/* we're not done yet */
			/* acknowledge received packet */
			tcp_sent(tpcb, tcp_server_sent);
			/* send remaining data */
			tcp_server_send(tpcb, es);
		}
		ret_err = ERR_OK;
	}
	/* else : a non empty frame was received from client but for some reason err != ERR_OK */
	else if(err != ERR_OK)
	{
		/* free received pbuf */
		if (p != NULL)
		{
			es->p = NULL;
			pbuf_free(p);
		}
		ret_err = err;
	}
	else if(es->state == ES_ACCEPTED)
	{
		/* first data chunk in p->payload */
		es->state = ES_RECEIVED;
		/* store reference to incoming pbuf (chain) */
		es->p = p;
		/* initialize LwIP tcp_sent callback function */
		tcp_sent(tpcb, tcp_server_sent);
		/* send back the received data (echo) */

//#ifndef SYSEM	
		tcp_server_send(tpcb, es);

		ret_err = ERR_OK;

		gcsvc.TCP_LineState=1;
		g_pcb 	= tpcb;
		g_es 	= es;

//==================================================================
// 처음 연결
//start==================================================================
		memcpy(acData_in + iSaveDatainPos, p->payload, p->len);
		iSaveDatainPos += p->len;

dp("iSaveDatainPos=%d len=%d\n",iSaveDatainPos,p->len);
		while(iSaveDatainPos >= PACKET_SIZE_MIN) 
		{
			pPacket = (LCAS_PACKET*)(acData_in);// + iPacketStartPos);
			iPacketLength = pPacket->nPacketLength;

			if(iSaveDatainPos < iPacketLength) {	// 데이터를 더 받아야 한다.
				break;
			}
//iprintf("1-PacketParse iSaveDatainPos=%d len=%d\n",iSaveDatainPos,p->len);
			if(PacketParse(pPacket->nPacketCode, acData_in) == RE_ERR) {
#if 1
// 종료 test--------------------------------------------
tcp_close(tpcb);
//tcp_server_connection_close(tpcb, es);
dp("test tcp_close\n");
#endif				
			};

			iSaveDatainPos = iSaveDatainPos - iPacketLength;
//dp("--iSaveDatainPos=%d\n",iSaveDatainPos);
			if(iSaveDatainPos != 0) {
				memcpy(acData_in, acData_in + iPacketLength, iSaveDatainPos);		// 데이터를 맨 앞으로 이동
			}
			iPacketLength = 0;
		}
//end==================================================================
//==================================================================
dp("First data received\r\n");

	}
	else if (es->state == ES_RECEIVED)
//	else if (es->state == ES_RECEIVED || es->state == ES_ACCEPTED)
	{
		/* more data received from client and previous data has been already sent*/
		if(es->p == NULL)
		{
			es->p = p;	//#ifndef SYSEM	

//==================================================================
//start==================================================================
#if TCP_SERVER_RECV_MODIFY
			if(p->len > TCP_RECV_PACKET_BUFF_SIZE) {
				return ERR_ABRT;
			}

			memcpy(acData_in + iSaveDatainPos, p->payload, p->len);
			iSaveDatainPos += p->len;

			while(iSaveDatainPos >= PACKET_SIZE_MIN)
			{
				pPacket = (LCAS_PACKET*)(acData_in + find_data_cnt);
				iPacketLength = pPacket->nPacketLength;

				if(iSaveDatainPos < iPacketLength) {	// 데이터를 더 받아야 한다. 
//iprintf(" err if(iSaveDatainPos(%d) < iPacketLength)=%d\n",iSaveDatainPos, iPacketLength);
					break;
				}

//				iprintf(" parse Length=%d nSlotSize=%d\n",iPacketLength, pPacket->nSlotSize);
				if(iPacketLength > TCP_PACKET_LENGTH_MAX ||	
					(iPacketLength != PACKET_SIZE_MIN && iPacketLength != PACKET_SIZE_MIN + pPacket->nSlotSize))
				{
					iSaveDatainPos--;
					find_data_cnt++;
					continue;
				}
				
//iprintf(" 2-Parse Pos=%d\n",iSaveDatainPos);
				if(PacketParse(pPacket->nPacketCode, acData_in) == RE_ERR) {
// 종료 test--------------------------------------------
//	tcp_close(tpcb);		// dp("test tcp_close\n");
// tcp_server_connection_close(tpcb, es);
				};

				iSaveDatainPos = iSaveDatainPos - iPacketLength;
				if(iSaveDatainPos != 0) { 
					memcpy(acData_in, acData_in + iPacketLength + find_data_cnt, iSaveDatainPos); 	// 데이터를 맨 앞으로 이동
				}
				
				find_data_cnt = 0;
			}
#else
			memcpy(acData_in + iSaveDatainPos, p->payload, p->len);
			iSaveDatainPos += len;
dp("iSaveDatainPos=%d len=%d\n",iSaveDatainPos,len);

			while(iSaveDatainPos >= PACKET_SIZE_MIN) 
			{
				pPacket = (LCAS_PACKET*)(acData_in);// + iPacketStartPos);
				iPacketLength = pPacket->nPacketLength;

				if(iSaveDatainPos < iPacketLength) {	// 데이터를 더 받아야 한다.
					break;
				}
//iprintf("2-PacketParse iSaveDatainPos=%d len=%d\n",iSaveDatainPos,len);
				if(PacketParse(pPacket->nPacketCode, acData_in) == RE_ERR) {

	// 종료 test--------------------------------------------
//	tcp_close(tpcb);
// tcp_server_connection_close(tpcb, es);
dp("test tcp_close\n");
				};

				iSaveDatainPos = iSaveDatainPos - iPacketLength;
				if(iSaveDatainPos != 0) { 
					memcpy(acData_in, acData_in + iPacketLength, iSaveDatainPos);		// 데이터를 맨 앞으로 이동
				}
				iPacketLength = 0;

			}
#endif			
//end==================================================================
//==================================================================
		}
		else
		{
			struct pbuf *ptr;
			/* chain pbufs to the end of what we recv'ed previously  */
			ptr = es->p;
			pbuf_chain(ptr,p);
		}
		ret_err = ERR_OK;
  }
  /* data received when connection already closed */
  else
  {
		/* Acknowledge data reception */
		tcp_recved(tpcb, p->tot_len);
dp("test tcp_recved =%d \n",p->tot_len);
		/* free pbuf and do nothing */
		es->p = NULL;
		pbuf_free(p);
		ret_err = ERR_OK;
  }
  return ret_err;
}

/**
  * @brief  This function implements the tcp_err callback function (called
  *         when a fatal tcp_connection error occurs. 
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

#if KCJ_TCP_CONNECTION_CLOSE
	//210615 CJKIM , 비정상으로 연결 해제 시 close
	tcp_server_connection_close(netAS_PCB, es);	//210624 CJKIM 
#endif

  es = (struct tcp_server_struct *)arg;
  if (es != NULL)
  {
    /*  free es structure */
    mem_free(es);
  }
}

/**
  * @brief  This function implements the tcp_poll LwIP callback function
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
  if (es != NULL)
  {
    if (es->p != NULL)
    {
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
      }
    }
    ret_err = ERR_OK;
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
    ret_err = ERR_ABRT;
  }
  return ret_err;
}

/**
  * @brief  This function implements the tcp_sent LwIP callback (called when ACK
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
  
  if(es->p != NULL)
  {
    /* still got pbufs to send */
    tcp_server_send(tpcb, es);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
      tcp_server_connection_close(tpcb, es);
  }
  return ERR_OK;
}

/**
  * @brief  This function is used to send data for tcp connection
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;

  while ((wr_err == ERR_OK) &&
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    /* get pointer on pbuf from es structure */
    ptr = es->p;

//#if 1
#if RYU_TCP
    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
#endif	    
    if (wr_err == ERR_OK)
    {
      u16_t plen;

      plen = ptr->len;
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
      
      if(es->p != NULL)
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
      }
      
      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
   }
   else
   {
     /* other problem ?? */
   }
  }

}

/**
  * @brief  This functions closes the tcp connection
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
dfp("tcp_server_connection_close()\r\n");

	gcsvc.TCP_LineState = 0;

	if(devState.connected == YES) {
		devState.connected = NO;
		devState.disconnected = YES;
		netConnectAction();	
	}		

	/* remove all callbacks */
	tcp_arg(tpcb, NULL);
	tcp_sent(tpcb, NULL);
	tcp_recv(tpcb, NULL);
	tcp_err(tpcb, NULL);
#if 1 // RYU_TCP	
	tcp_poll(tpcb, NULL, 0);
#endif
	/* delete es structure */
	if (es != NULL)
	{
		mem_free(es);
	}

#if KCJ_TCP_CONNECTION_CLOSE
// 210625 CJKIM Memory free added,  clarity에서 데이터 수신 안되어 close 반복 시 memory leak 발생.
		if (tpcb->unacked != NULL) {
			tcp_segs_free(tpcb->unacked);
		}
		if (tpcb->unsent != NULL) {
			tcp_segs_free(tpcb->unsent);
		}
#if TCP_QUEUE_OOSEQ    
		if (tpcb->ooseq != NULL) {
			tcp_segs_free(tpcb->ooseq);
		}
#endif /* TCP_QUEUE_OOSEQ */
// 210625 CJKIM
#endif

	/* close tcp connection */
	tcp_close(tpcb);

}


/*
 * GCDB(GC Data Block) send
 */
#if 0 
err_t tcp_GCDB_Send(struct tcp_pcb *tpcb, struct tcp_server_struct *es, struct pbuf *gcd_pbuf)
{
	err_t wr_err = ERR_OK;
	u16_t len;
	uint16_t i;
//xxx
	if(gcsvc.GCDB_SendEnable == 0) return ERR_OK;

	for(i=0;i<600;i++)
		data_buff[i] = hex2char_conv(i%10);
	data_buff[598] = '\r';
	data_buff[599] = '\n';

	len = 600;

	wr_err = tcp_write(tpcb, (void *)data_buff, len, 1);

	if (wr_err == ERR_OK)
	{
		tcp_output(g_pcb);
		gcsvc.fail_cnt = 0;
	}
	else
	{
		//dprintf("send fail\r\n");
		gcsvc.fail_cnt++;
		if(gcsvc.fail_cnt > 20)
		{
			gcsvc.GCDB_SendEnable = 0;
			dprintf("Auto send stop\r\n");
		}
	}

	return wr_err;
}
#endif

void tcp_esstate_print(void)
{
	if(GCC_MASTER != gcsvc.MasterSlave)
		return;

	if(esstate_save != g_es->state)
	{
		switch(g_es->state)
		{
			case ES_NONE : 		dprintf("NONE\r\n"); break;
			case ES_ACCEPTED : 	dprintf("ACCEPTED\r\n"); break;
			case ES_RECEIVED : 	dprintf("RECEIVED\r\n"); break;
			case ES_CLOSING : 	dprintf("CLOSING\r\n"); break;
		}

		esstate_save = g_es->state;
	}

	if(g_es->state == ES_CLOSING)
	{
		ConnTime++;
		if(ConnTime > 5)
		{
			ConnTime = 0;
			g_es->state = ES_NONE;
		}
	}
	else
		ConnTime = 0;
}

#endif /* LWIP_TCP */
